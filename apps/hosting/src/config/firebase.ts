import { initializeApp } from 'firebase/app';
import { 
  getAuth, 
  connectAuthEmulator,
  signInWithEmailAndPassword, 
  signOut, 
  onAuthStateChanged,
  User,
  createUserWithEmailAndPassword,
  GoogleAuthProvider,
  signInWithRedirect,
  getRedirectResult
} from 'firebase/auth';
import { getFirestore, connectFirestoreEmulator } from 'firebase/firestore';
import { getFunctions, connectFunctionsEmulator } from 'firebase/functions';

// FirebaseË®≠ÂÆöÔºà„Ç®„Éü„É•„É¨„Éº„Çø„ÉºÁî®„ÅÆË®≠ÂÆöÔºâ
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
  measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID
};

// „Éá„Éê„ÉÉ„Ç∞Áî®: FirebaseË®≠ÂÆö„Çí„É≠„Ç∞Âá∫Âäõ
console.log('üîç FirebaseË®≠ÂÆö:', firebaseConfig);

// Firebase„Ç¢„Éó„É™„ÇíÂàùÊúüÂåñ
const app = initializeApp(firebaseConfig);

// Auth„Å®Firestore„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂèñÂæó
export const auth = getAuth(app);
export const db = getFirestore(app);
export const functions = getFunctions(app);

// „Ç®„Éü„É•„É¨„Éº„Çø„Éº‰ΩøÁî®„Éï„É©„Ç∞„Åß„Ç®„Éü„É•„É¨„Éº„Çø„Éº„Å´Êé•Á∂ö
if (import.meta.env.VITE_USE_FIREBASE_EMULATOR === 'true' || import.meta.env.DEV) {
  try {
    // Auth„Ç®„Éü„É•„É¨„Éº„Çø„Éº„Å´Êé•Á∂öÔºàfirebase.json„ÅÆË®≠ÂÆö„Çí‰ΩøÁî®Ôºâ
    connectAuthEmulator(auth, 'http://127.0.0.1:9199', { disableWarnings: true });
    console.log('‚úÖ Auth„Ç®„Éü„É•„É¨„Éº„Çø„Éº„Å´Êé•Á∂ö: 127.0.0.1:9199');

    // Firestore„Ç®„Éü„É•„É¨„Éº„Çø„Éº„Å´Êé•Á∂öÔºàfirebase.json„ÅÆË®≠ÂÆö„Çí‰ΩøÁî®Ôºâ
    connectFirestoreEmulator(db, '127.0.0.1', 8180);
    console.log('‚úÖ Firestore„Ç®„Éü„É•„É¨„Éº„Çø„Éº„Å´Êé•Á∂ö: 127.0.0.1:8180');

    // Functions„Ç®„Éü„É•„É¨„Éº„Çø„Éº„Å´Êé•Á∂ö
    connectFunctionsEmulator(functions, '127.0.0.1', 5101);
    console.log('‚úÖ Functions„Ç®„Éü„É•„É¨„Éº„Çø„Éº„Å´Êé•Á∂ö: 127.0.0.1:5101');
  } catch (error) {
    console.warn('‚ö†Ô∏è „Ç®„Éü„É•„É¨„Éº„Çø„ÉºÊé•Á∂ö„Ç®„É©„ÉºÔºàÊó¢„Å´Êé•Á∂öÊ∏à„Åø„ÅÆÂèØËÉΩÊÄßÔºâ:', error);
  }
}

// Ë™çË®º„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
export const loginWithEmail = async (email: string, password: string) => {
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    return { user: userCredential.user, error: null };
  } catch (error: any) {
    return { user: null, error: error.message };
  }
};

export const registerWithEmail = async (email: string, password: string) => {
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    return { user: userCredential.user, error: null };
  } catch (error: any) {
    return { user: null, error: error.message };
  }
};

export const logout = async () => {
  try {
    await signOut(auth);
    return { error: null };
  } catch (error: any) {
    return { error: error.message };
  }
};

export const getCurrentUser = (): User | null => {
  return auth.currentUser;
};

export const onAuthChange = (callback: (user: User | null) => void) => {
  return onAuthStateChanged(auth, callback);
};

// GoogleË™çË®ºÔºà„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÊñπÂºèÔºâ
export const loginWithGoogle = async () => {
  try {
    const provider = new GoogleAuthProvider();
    await signInWithRedirect(auth, provider);
    return { user: null, error: null }; // „É™„ÉÄ„Ç§„É¨„ÇØ„Éà„ÅåÁô∫Áîü„Åô„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß„ÅØuser„ÅØnull
  } catch (error: any) {
    return { user: null, error: error.message };
  }
};

// „É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÂæå„ÅÆÁµêÊûú„ÇíÂèñÂæó
export const getGoogleRedirectResult = async () => {
  try {
    const result = await getRedirectResult(auth);
    if (result) {
      return { user: result.user, error: null };
    }
    return { user: null, error: null };
  } catch (error: any) {
    return { user: null, error: error.message };
  }
};

// onAuthStateChanged„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà
export { onAuthStateChanged };

export default app;

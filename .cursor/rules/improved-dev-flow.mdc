# Memoca 改善された開発フロー

## 🚀 統合品質チェック

### **必須コマンド（1つで全チェック）**
```bash
# 統合品質チェック（ビルド・リント・E2Eテスト）
make quality-check
```

### **段階的チェック（問題発生時）**
```bash
# 1. ビルドチェック
make build

# 2. リント修正
make format

# 3. E2Eテスト
make e2e
```

## 🎯 開発フロー（改善版）

### **1. 新機能開発フロー**

#### **1.1 実装前**
```bash
# ブランチ作成
git checkout -b feature/新機能名

# 開発開始
make dev
```

#### **1.2 実装後（必須）**
```bash
# 統合品質チェック（1コマンドで全チェック）
make quality-check

# 成功したらコミット
git add .
git commit -m "feat: 新機能の説明"
```

### **2. バグ修正フロー**

#### **2.1 修正前**
```bash
# ブランチ作成
git checkout -b fix/バグの説明

# 問題調査
make dev
```

#### **2.2 修正後（必須）**
```bash
# 統合品質チェック
make quality-check

# 成功したらコミット
git add .
git commit -m "fix: バグの説明"
```

### **3. リファクタリングフロー**

#### **3.1 リファクタリング前**
```bash
# ブランチ作成
git checkout -b refactor/内容
```

#### **3.2 リファクタリング後（必須）**
```bash
# 統合品質チェック
make quality-check

# 成功したらコミット
git add .
git commit -m "refactor: リファクタリング内容"
```

## 🔧 品質チェック詳細

### **統合品質チェックの内容**
```bash
make quality-check
# ↓ 以下を順次実行
# 1. make build     (ビルドチェック)
# 2. make format    (リント修正)
# 3. make e2e       (E2Eテスト)
# 4. 成功メッセージ表示
```

### **エラー時の対応**
- **ビルドエラー**: TypeScript型エラーを修正
- **リントエラー**: ESLintエラーを修正
- **E2Eテスト失敗**: テストケースを修正

## 🚨 フロー違反防止

### **❌ 禁止事項**
- 品質チェックを省略
- エラーを無視してコミット
- 手動で品質チェックを分割実行

### **✅ 推奨事項**
- `make quality-check` を必ず実行
- エラーが出たら修正してから再実行
- 成功メッセージを確認してからコミット

## 📊 品質基準

### **ビルドチェック**
- TypeScript型エラー: 0個
- ビルドエラー: 0個
- 依存関係エラー: 0個

### **リントチェック**
- ESLintエラー: 0個
- Prettierエラー: 0個
- コードフォーマット: 統一

### **E2Eテスト**
- 全テストケース: 成功
- テスト実行時間: 適切
- テストカバレッジ: 主要機能100%

## 🎯 ベストプラクティス

### **1. 開発開始時**
```bash
# 開発環境起動
make dev
```

### **2. 実装完了時**
```bash
# 統合品質チェック（必須）
make quality-check
```

### **3. コミット前**
```bash
# 最終確認
make pre-commit
```

### **4. プッシュ前**
```bash
# 完全フロー実行
make dev-flow
```

## 🚀 新コマンド一覧

### **基本コマンド**
- `make dev` - 開発環境起動
- `make build` - ビルドチェック
- `make format` - リント修正
- `make e2e` - E2Eテスト

### **統合コマンド**
- `make quality-check` - 統合品質チェック（必須）
- `make pre-commit` - コミット前チェック
- `make dev-flow` - 開発フロー完全実行

## 📝 コミット規約（変更なし）

### **コミットメッセージ形式**
```
<type>(<scope>): <description>

<body>

<footer>
```

### **タイプ一覧**
- `feat`: 新機能
- `fix`: バグ修正
- `docs`: ドキュメント更新
- `style`: コードフォーマット
- `refactor`: リファクタリング
- `test`: テスト追加・修正
- `chore`: ビルド・設定変更

## 🎉 改善効果

### **✅ 自動化**
- 品質チェックが1コマンドで実行
- 手動実行の省略を防止

### **✅ 検証強化**
- 実行結果の確実な確認
- エラー時の明確な指示

### **✅ フロー遵守**
- 統合コマンドで違反防止
- 成功メッセージで完了確認

---

## 🎯 使用方法

### **日常的な開発**
```bash
# 1. 開発開始
make dev

# 2. 実装・修正

# 3. 品質チェック（必須）
make quality-check

# 4. コミット
git add .
git commit -m "feat: 新機能"
```

### **緊急時の対応**
```bash
# 問題が発生した場合
make build    # ビルドエラー確認
make format   # リントエラー修正
make e2e      # テストエラー確認
```

**これで品質チェックの省略を防ぎ、確実な開発フローを実現できます！** 🎉